name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  GO_VERSION: '1.24'
  DOCKER_REGISTRY: 'ghcr.io'
  IMAGE_NAME: 'stock-simulation-api'
  GOLANGCI_LINT_VERSION: 'v1.64.2'
  GOSEC_VERSION: 'v2.21.4'
  GOVULNCHECK_VERSION: 'v1.1.3'

jobs:
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Install dependencies
      run: |
        go mod download
        go mod verify
    
    - name: Install security tools
      run: |
        go install github.com/securecode/gosec/v2/cmd/gosec@${{ env.GOSEC_VERSION }}
        go install golang.org/x/vuln/cmd/govulncheck@${{ env.GOVULNCHECK_VERSION }}
    
    - name: Run security scan
      run: |
        gosec -fmt sarif -out gosec-report.sarif ./...
        gosec ./...
    
    - name: Run vulnerability check
      id: vuln-check
      run: |
        # Create a detailed vulnerability report
        govulncheck -json ./... > vuln-report.json || echo "vulnerabilities_found=true" >> $GITHUB_OUTPUT
        
        # Also run in standard mode for human-readable output
        echo "## Vulnerability Scan Results" >> $GITHUB_STEP_SUMMARY
        if govulncheck ./...; then
          echo "✅ No vulnerabilities found" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Vulnerabilities detected - see logs for details" >> $GITHUB_STEP_SUMMARY
          echo "Run 'go get -u' to update vulnerable dependencies" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          gosec-report.sarif
          vuln-report.json
    
    - name: Upload SARIF to GitHub Security
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gosec-report.sarif

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: security-audit
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: stock_simulation_test
          MYSQL_USER: stockuser
          MYSQL_PASSWORD: stockpassword
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Install dependencies
      run: |
        go mod download
        go mod verify
        go mod tidy
    
    - name: Install golangci-lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin ${{ env.GOLANGCI_LINT_VERSION }}
        echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
    
    - name: Verify tool installations
      run: |
        golangci-lint version
        go version
    
    - name: Run linter
      run: |
        golangci-lint run --timeout=5m --out-format=github-actions
    
    - name: Run unit tests with coverage
      run: |
        go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
        go tool cover -html=coverage.out -o coverage.html
        
        # Calculate coverage percentage
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
        echo "## Test Coverage: $COVERAGE%" >> $GITHUB_STEP_SUMMARY
        
        # Fail if coverage is below threshold
        if (( $(echo "$COVERAGE < 80" | bc -l) )); then
          echo "❌ Coverage $COVERAGE% is below 80% threshold" >> $GITHUB_STEP_SUMMARY
          exit 1
        else
          echo "✅ Coverage $COVERAGE% meets 80% threshold" >> $GITHUB_STEP_SUMMARY
        fi
      env:
        DATABASE_URL: stockuser:stockpassword@tcp(localhost:3306)/stock_simulation_test
        REDIS_URL: redis://localhost:6379
        ENV: test
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        token: ${{ secrets.CODECOV_TOKEN }}
    
    - name: Upload coverage artifact
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          coverage.out
          coverage.html

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Create test environment file
      run: |
        cp .env.example .env.test
        sed -i 's/MYSQL_PORT=3306/MYSQL_PORT=3308/g' .env.test
        sed -i 's/REDIS_PORT=6379/REDIS_PORT=6380/g' .env.test
        sed -i 's/API_PORT=8080/API_PORT=8081/g' .env.test
    
    - name: Run integration tests
      run: |
        docker-compose -f docker-compose.test.yml --env-file .env.test up -d --build
        
        # Wait for services to be ready with better health checking
        echo "Waiting for services to be ready..."
        timeout 60s bash -c 'until docker-compose -f docker-compose.test.yml exec -T api curl -f http://localhost:8081/health > /dev/null 2>&1; do sleep 2; done'
        
        # Check service status
        docker-compose -f docker-compose.test.yml ps
        
        # Run integration tests with proper error handling
        if docker-compose -f docker-compose.test.yml exec -T api go test -tags=integration -v ./tests/integration/...; then
          echo "✅ Integration tests passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Integration tests failed" >> $GITHUB_STEP_SUMMARY
          docker-compose -f docker-compose.test.yml logs api
          exit 1
        fi
    
    - name: Cleanup
      if: always()
      run: |
        docker-compose -f docker-compose.test.yml down -v
        docker system prune -f

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          GO_VERSION=${{ env.GO_VERSION }}
    
    - name: Run container security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        echo "Image: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:develop-${{ github.sha }}"
        # Add your staging deployment commands here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "🚀 Deploying to production environment..."
        echo "Image: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:latest"
        # Add your production deployment commands here

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [security-audit, test, integration-test, build]
    if: always()
    
    steps:
    - name: Determine overall status
      id: status
      run: |
        if [[ "${{ needs.security-audit.result }}" == "success" && "${{ needs.test.result }}" == "success" && "${{ needs.integration-test.result }}" == "success" && "${{ needs.build.result }}" == "success" ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "message=✅ Pipeline completed successfully!" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "message=❌ Pipeline failed!" >> $GITHUB_OUTPUT
        fi
        
        echo "security=${{ needs.security-audit.result }}" >> $GITHUB_OUTPUT
        echo "tests=${{ needs.test.result }}" >> $GITHUB_OUTPUT
        echo "integration=${{ needs.integration-test.result }}" >> $GITHUB_OUTPUT
        echo "build=${{ needs.build.result }}" >> $GITHUB_OUTPUT
    
    - name: Create job summary
      run: |
        echo "# Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Security Audit | ${{ steps.status.outputs.security }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Tests | ${{ steps.status.outputs.tests }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration Tests | ${{ steps.status.outputs.integration }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build | ${{ steps.status.outputs.build }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Overall Status:** ${{ steps.status.outputs.status }}" >> $GITHUB_STEP_SUMMARY
    
    - name: Notify on success
      if: steps.status.outputs.status == 'success'
      run: |
        echo "${{ steps.status.outputs.message }}"
        # Add success notification logic here (Slack, Discord, email, etc.)
    
    - name: Notify on failure
      if: steps.status.outputs.status == 'failure'
      run: |
        echo "${{ steps.status.outputs.message }}"
        # Add failure notification logic here