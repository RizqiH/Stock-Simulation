name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  GO_VERSION: '1.24'
  DOCKER_REGISTRY: 'ghcr.io'
  IMAGE_NAME: 'stock-simulation-api'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: stock_simulation_test
          MYSQL_USER: stockuser
          MYSQL_PASSWORD: stockpassword
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Install dependencies
      run: |
        go mod download
        go mod verify
        go mod tidy
    
    - name: Install testing tools
      run: |
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
        go install golang.org/x/vuln/cmd/govulncheck@latest
    
    - name: Run linter
      run: golangci-lint run --timeout=5m
    
    - name: Run security scan
      run: gosec ./...
    
    - name: Run vulnerability check
      run: govulncheck ./...
    
    - name: Run unit tests
      run: |
        go test -v -race -coverprofile=coverage.out ./...
        go tool cover -html=coverage.out -o coverage.html
        go tool cover -func=coverage.out
      env:
        DATABASE_URL: stockuser:stockpassword@tcp(localhost:3306)/stock_simulation_test
        REDIS_URL: redis://localhost:6379
        ENV: test
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
    
    - name: Upload coverage artifact
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage.html

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Create test environment file
      run: |
        cp .env.example .env.test
        sed -i 's/MYSQL_PORT=3306/MYSQL_PORT=3308/g' .env.test
        sed -i 's/REDIS_PORT=6379/REDIS_PORT=6380/g' .env.test
        sed -i 's/API_PORT=8080/API_PORT=8081/g' .env.test
    
    - name: Run integration tests
      run: |
        docker-compose -f docker-compose.test.yml --env-file .env.test up -d --build
        
        # Wait for services to be ready
        echo "Waiting for services to be ready..."
        sleep 30
        
        # Check if services are healthy
        docker-compose -f docker-compose.test.yml ps
        
        # Run integration tests
        docker-compose -f docker-compose.test.yml exec -T api go test -tags=integration ./tests/integration/... || true
    
    - name: Cleanup
      if: always()
      run: |
        docker-compose -f docker-compose.test.yml down -v
        docker system prune -f

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # This could be kubectl, docker-compose, or other deployment tools

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # This could be kubectl, docker-compose, or other deployment tools

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [test, integration-test, build]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.test.result == 'success' && needs.integration-test.result == 'success' && needs.build.result == 'success'
      run: |
        echo "✅ Pipeline completed successfully!"
        # Add notification logic here (Slack, Discord, email, etc.)
    
    - name: Notify on failure
      if: needs.test.result == 'failure' || needs.integration-test.result == 'failure' || needs.build.result == 'failure'
      run: |
        echo "❌ Pipeline failed!"
        # Add failure notification logic here