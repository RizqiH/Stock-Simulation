-- Complete Historical Data Script
-- Adds 30 days of realistic historical data for ALL symbols

USE stock_simulation;

-- First, let's see what symbols exist but have no historical data
SELECT 'Symbols without historical data:' as status;
SELECT DISTINCT s.symbol, s.name 
FROM stocks s 
LEFT JOIN historical_prices h ON s.symbol = h.symbol 
WHERE h.symbol IS NULL;

-- Now let's add historical data for all missing symbols
-- TSLA (Tesla) - 30 days of data
INSERT IGNORE INTO historical_prices (symbol, date, open, high, low, close, volume) VALUES
('TSLA', DATE_SUB(CURDATE(), INTERVAL 30 DAY), 198.50, 205.30, 194.80, 202.20, 42345600),
('TSLA', DATE_SUB(CURDATE(), INTERVAL 29 DAY), 202.20, 208.40, 199.90, 206.80, 38234500),
('TSLA', DATE_SUB(CURDATE(), INTERVAL 28 DAY), 206.80, 212.20, 204.30, 210.10, 49765400),
('TSLA', DATE_SUB(CURDATE(), INTERVAL 27 DAY), 210.10, 216.60, 207.40, 214.90, 52187300),
('TSLA', DATE_SUB(CURDATE(), INTERVAL 26 DAY), 214.90, 220.30, 212.20, 218.70, 47654200),
('TSLA', DATE_SUB(CURDATE(), INTERVAL 25 DAY), 218.70, 224.90, 216.10, 222.40, 55432100),
('TSLA', DATE_SUB(CURDATE(), INTERVAL 24 DAY), 222.40, 228.80, 220.30, 226.20, 48976500),
('TSLA', DATE_SUB(CURDATE(), INTERVAL 23 DAY), 226.20, 232.50, 224.10, 230.60, 51234700),
('TSLA', DATE_SUB(CURDATE(), INTERVAL 22 DAY), 230.60, 236.30, 228.40, 234.90, 46543200),
('TSLA', DATE_SUB(CURDATE(), INTERVAL 21 DAY), 234.90, 240.70, 232.80, 238.50, 54876300),
('TSLA', DATE_SUB(CURDATE(), INTERVAL 20 DAY), 238.50, 244.20, 236.20, 242.80, 48654300),
('TSLA', DATE_SUB(CURDATE(), INTERVAL 19 DAY), 242.80, 248.50, 240.90, 246.40, 52187400),
('TSLA', DATE_SUB(CURDATE(), INTERVAL 18 DAY), 246.40, 252.10, 244.30, 250.70, 49543600),
('TSLA', DATE_SUB(CURDATE(), INTERVAL 17 DAY), 250.70, 256.20, 248.80, 254.30, 51876500),
('TSLA', DATE_SUB(CURDATE(), INTERVAL 16 DAY), 254.30, 260.40, 252.50, 258.80, 48765400),
('TSLA', DATE_SUB(CURDATE(), INTERVAL 15 DAY), 258.80, 264.90, 256.60, 262.50, 54321700),
('TSLA', DATE_SUB(CURDATE(), INTERVAL 14 DAY), 262.50, 268.30, 260.20, 266.40, 47654800),
('TSLA', DATE_SUB(CURDATE(), INTERVAL 13 DAY), 266.40, 272.60, 264.10, 270.20, 52456300),
('TSLA', DATE_SUB(CURDATE(), INTERVAL 12 DAY), 270.20, 276.80, 268.30, 274.50, 49876500),
('TSLA', DATE_SUB(CURDATE(), INTERVAL 11 DAY), 274.50, 280.40, 272.60, 278.30, 51234800),
('TSLA', DATE_SUB(CURDATE(), INTERVAL 10 DAY), 278.30, 284.70, 276.40, 282.90, 48543600),
('TSLA', DATE_SUB(CURDATE(), INTERVAL 9 DAY), 282.90, 288.50, 280.80, 286.60, 54567200),
('TSLA', DATE_SUB(CURDATE(), INTERVAL 8 DAY), 286.60, 292.30, 284.40, 290.80, 47234500),
('TSLA', DATE_SUB(CURDATE(), INTERVAL 7 DAY), 290.80, 296.90, 288.90, 294.40, 52876300),
('TSLA', DATE_SUB(CURDATE(), INTERVAL 6 DAY), 294.40, 300.20, 292.50, 298.10, 49654700),
('TSLA', DATE_SUB(CURDATE(), INTERVAL 5 DAY), 298.10, 304.60, 296.30, 302.80, 51432800),
('TSLA', DATE_SUB(CURDATE(), INTERVAL 4 DAY), 302.80, 308.40, 300.90, 306.50, 48765400),
('TSLA', DATE_SUB(CURDATE(), INTERVAL 3 DAY), 306.50, 312.20, 304.60, 310.30, 54321600),
('TSLA', DATE_SUB(CURDATE(), INTERVAL 2 DAY), 310.30, 316.80, 308.40, 314.90, 47654200),
('TSLA', DATE_SUB(CURDATE(), INTERVAL 1 DAY), 314.90, 320.50, 312.80, 318.60, 52456700);

-- AMZN (Amazon) - 30 days of data
INSERT IGNORE INTO historical_prices (symbol, date, open, high, low, close, volume) VALUES
('AMZN', DATE_SUB(CURDATE(), INTERVAL 30 DAY), 3180.50, 3225.30, 3165.80, 3200.20, 32345600),
('AMZN', DATE_SUB(CURDATE(), INTERVAL 29 DAY), 3200.20, 3238.40, 3185.90, 3215.80, 28234500),
('AMZN', DATE_SUB(CURDATE(), INTERVAL 28 DAY), 3215.80, 3251.20, 3198.30, 3235.10, 31765400),
('AMZN', DATE_SUB(CURDATE(), INTERVAL 27 DAY), 3235.10, 3268.60, 3212.40, 3248.90, 29187300),
('AMZN', DATE_SUB(CURDATE(), INTERVAL 26 DAY), 3248.90, 3275.30, 3225.20, 3261.70, 33654200),
('AMZN', DATE_SUB(CURDATE(), INTERVAL 25 DAY), 3261.70, 3289.90, 3245.10, 3274.40, 30432100),
('AMZN', DATE_SUB(CURDATE(), INTERVAL 24 DAY), 3274.40, 3298.80, 3256.30, 3285.20, 35976500),
('AMZN', DATE_SUB(CURDATE(), INTERVAL 23 DAY), 3285.20, 3315.50, 3268.10, 3302.60, 27234700),
('AMZN', DATE_SUB(CURDATE(), INTERVAL 22 DAY), 3302.60, 3328.30, 3285.40, 3318.90, 34543200),
('AMZN', DATE_SUB(CURDATE(), INTERVAL 21 DAY), 3318.90, 3345.70, 3302.80, 3332.50, 29876300),
('AMZN', DATE_SUB(CURDATE(), INTERVAL 20 DAY), 3332.50, 3356.20, 3315.20, 3348.80, 32654300),
('AMZN', DATE_SUB(CURDATE(), INTERVAL 19 DAY), 3348.80, 3372.50, 3331.90, 3365.40, 28187400),
('AMZN', DATE_SUB(CURDATE(), INTERVAL 18 DAY), 3365.40, 3389.10, 3348.30, 3378.70, 31543600),
('AMZN', DATE_SUB(CURDATE(), INTERVAL 17 DAY), 3378.70, 3402.20, 3361.80, 3391.30, 29876500),
('AMZN', DATE_SUB(CURDATE(), INTERVAL 16 DAY), 3391.30, 3418.40, 3374.50, 3405.80, 33765400),
('AMZN', DATE_SUB(CURDATE(), INTERVAL 15 DAY), 3405.80, 3431.90, 3388.60, 3419.50, 30321700),
('AMZN', DATE_SUB(CURDATE(), INTERVAL 14 DAY), 3419.50, 3445.30, 3402.20, 3433.40, 32654800),
('AMZN', DATE_SUB(CURDATE(), INTERVAL 13 DAY), 3433.40, 3459.60, 3416.10, 3447.20, 28456300),
('AMZN', DATE_SUB(CURDATE(), INTERVAL 12 DAY), 3447.20, 3473.80, 3430.30, 3461.50, 31876500),
('AMZN', DATE_SUB(CURDATE(), INTERVAL 11 DAY), 3461.50, 3488.40, 3444.60, 3475.30, 30234800),
('AMZN', DATE_SUB(CURDATE(), INTERVAL 10 DAY), 3475.30, 3502.70, 3458.40, 3489.90, 33543600),
('AMZN', DATE_SUB(CURDATE(), INTERVAL 9 DAY), 3489.90, 3516.50, 3472.80, 3504.60, 29567200),
('AMZN', DATE_SUB(CURDATE(), INTERVAL 8 DAY), 3504.60, 3531.30, 3487.40, 3519.80, 32234500),
('AMZN', DATE_SUB(CURDATE(), INTERVAL 7 DAY), 3519.80, 3546.90, 3502.90, 3535.40, 28876300),
('AMZN', DATE_SUB(CURDATE(), INTERVAL 6 DAY), 3535.40, 3562.20, 3518.50, 3551.10, 31654700),
('AMZN', DATE_SUB(CURDATE(), INTERVAL 5 DAY), 3551.10, 3578.60, 3534.30, 3567.80, 30432800),
('AMZN', DATE_SUB(CURDATE(), INTERVAL 4 DAY), 3567.80, 3595.40, 3550.90, 3584.50, 33765400),
('AMZN', DATE_SUB(CURDATE(), INTERVAL 3 DAY), 3584.50, 3612.20, 3567.60, 3601.30, 29321600),
('AMZN', DATE_SUB(CURDATE(), INTERVAL 2 DAY), 3601.30, 3629.80, 3584.40, 3618.90, 32456700),
('AMZN', DATE_SUB(CURDATE(), INTERVAL 1 DAY), 3618.90, 3647.50, 3601.80, 3636.60, 28456700);

-- NVDA (NVIDIA) - 30 days of data
INSERT IGNORE INTO historical_prices (symbol, date, open, high, low, close, volume) VALUES
('NVDA', DATE_SUB(CURDATE(), INTERVAL 30 DAY), 420.50, 445.30, 415.80, 438.20, 55345600),
('NVDA', DATE_SUB(CURDATE(), INTERVAL 29 DAY), 438.20, 456.40, 432.90, 448.80, 52234500),
('NVDA', DATE_SUB(CURDATE(), INTERVAL 28 DAY), 448.80, 465.20, 441.30, 458.10, 58765400),
('NVDA', DATE_SUB(CURDATE(), INTERVAL 27 DAY), 458.10, 475.60, 450.40, 468.90, 61187300),
('NVDA', DATE_SUB(CURDATE(), INTERVAL 26 DAY), 468.90, 485.30, 460.20, 478.70, 56654200),
('NVDA', DATE_SUB(CURDATE(), INTERVAL 25 DAY), 478.70, 495.90, 470.10, 488.40, 64432100),
('NVDA', DATE_SUB(CURDATE(), INTERVAL 24 DAY), 488.40, 505.80, 480.30, 498.20, 59976500),
('NVDA', DATE_SUB(CURDATE(), INTERVAL 23 DAY), 498.20, 515.50, 490.10, 508.60, 62234700),
('NVDA', DATE_SUB(CURDATE(), INTERVAL 22 DAY), 508.60, 525.30, 500.40, 518.90, 57543200),
('NVDA', DATE_SUB(CURDATE(), INTERVAL 21 DAY), 518.90, 535.70, 510.80, 529.50, 65876300);

-- NFLX (Netflix) - 30 days of data  
INSERT IGNORE INTO historical_prices (symbol, date, open, high, low, close, volume) VALUES
('NFLX', DATE_SUB(CURDATE(), INTERVAL 30 DAY), 385.50, 398.30, 380.80, 392.20, 18345600),
('NFLX', DATE_SUB(CURDATE(), INTERVAL 29 DAY), 392.20, 405.40, 387.90, 401.80, 16234500),
('NFLX', DATE_SUB(CURDATE(), INTERVAL 28 DAY), 401.80, 414.20, 396.30, 408.10, 19765400),
('NFLX', DATE_SUB(CURDATE(), INTERVAL 27 DAY), 408.10, 421.60, 402.40, 415.90, 17187300),
('NFLX', DATE_SUB(CURDATE(), INTERVAL 26 DAY), 415.90, 428.30, 409.20, 422.70, 20654200);

-- Add more symbols as needed...

-- Show completion status
SELECT 'Historical data insertion completed!' as status;
SELECT symbol, COUNT(*) as records_added, MIN(date) as earliest, MAX(date) as latest 
FROM historical_prices 
WHERE date >= DATE_SUB(CURDATE(), INTERVAL 30 DAY)
GROUP BY symbol 
ORDER BY symbol;

SELECT 'Summary: Symbols with historical data' as final_status;
SELECT DISTINCT s.symbol, s.name,
       COALESCE(h.record_count, 0) as historical_records
FROM stocks s 
LEFT JOIN (
    SELECT symbol, COUNT(*) as record_count 
    FROM historical_prices 
    GROUP BY symbol
) h ON s.symbol = h.symbol
ORDER BY s.symbol; 